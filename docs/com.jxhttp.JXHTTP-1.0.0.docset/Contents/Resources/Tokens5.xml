<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/JXHTTPMultipartBody.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/JXHTTPMultipartBody</TokenIdentifier>
			<Abstract type="html">JXHTTPMultipartBody conforms to JXHTTPRequestBody and provides functionality for
mulitpart MIME request bodies (with potentially multiple content types).</Abstract>
			<DeclaredIn>JXHTTPMultipartBody.h</DeclaredIn>
			
			<NodeRef refid="5"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JXHTTPMultipartBody/setStreamBufferLength:</TokenIdentifier>
			<Abstract type="html">The stream buffer size for the file input stream. In most cases you shouldn&apos;t need to
change this, the 64K default is intended to match the output stream of NSURLConnection.</Abstract>
			<DeclaredIn>JXHTTPMultipartBody.h</DeclaredIn>			
			
			<Declaration>@property (assign, nonatomic) NSUInteger streamBufferLength</Declaration>
			
			
			<Anchor>//api/name/streamBufferLength</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/JXHTTPMultipartBody/streamBufferLength</TokenIdentifier>
			<Abstract type="html">The stream buffer size for the file input stream. In most cases you shouldn&apos;t need to
change this, the 64K default is intended to match the output stream of NSURLConnection.</Abstract>
			<DeclaredIn>JXHTTPMultipartBody.h</DeclaredIn>			
			
			<Declaration>@property (assign, nonatomic) NSUInteger streamBufferLength</Declaration>
			
			
			<Anchor>//api/name/streamBufferLength</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/JXHTTPMultipartBody/withDictionary:</TokenIdentifier>
			<Abstract type="html">Creates a new JXHTTPMultipartBody.</Abstract>
			<DeclaredIn>JXHTTPMultipartBody.h</DeclaredIn>			
			
			<Declaration>+ (instancetype)withDictionary:(NSDictionary *)stringParameters</Declaration>
			<Parameters>
				<Parameter>
					<Name>stringParameters</Name>
					<Abstract type="html">A dictionary of keys and values that will be added as a text part.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A multipart request body.</Abstract></ReturnValue>
			<Anchor>//api/name/withDictionary:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JXHTTPMultipartBody/initWithDictionary:</TokenIdentifier>
			<Abstract type="html">Creates a new JXHTTPMultipartBody.</Abstract>
			<DeclaredIn>JXHTTPMultipartBody.h</DeclaredIn>			
			
			<Declaration>- (instancetype)initWithDictionary:(NSDictionary *)stringParameters</Declaration>
			<Parameters>
				<Parameter>
					<Name>stringParameters</Name>
					<Abstract type="html">A dictionary of keys and values that will be added as a text/plain part.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A multipart request body.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithDictionary:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JXHTTPMultipartBody/addString:forKey:</TokenIdentifier>
			<Abstract type="html">Adds a new text/plain part with the specified key.</Abstract>
			<DeclaredIn>JXHTTPMultipartBody.h</DeclaredIn>			
			
			<Declaration>- (void)addString:(NSString *)string forKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>string</Name>
					<Abstract type="html">The value.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">The key.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addString:forKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JXHTTPMultipartBody/setString:forKey:</TokenIdentifier>
			<Abstract type="html">Adds a new text/plain part with the specified key and overwrites any existing value.</Abstract>
			<DeclaredIn>JXHTTPMultipartBody.h</DeclaredIn>			
			
			<Declaration>- (void)setString:(NSString *)string forKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>string</Name>
					<Abstract type="html">The value.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">The key.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setString:forKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JXHTTPMultipartBody/addData:forKey:contentType:fileName:</TokenIdentifier>
			<Abstract type="html">Adds a new data part with the specified content type.</Abstract>
			<DeclaredIn>JXHTTPMultipartBody.h</DeclaredIn>			
			
			<Declaration>- (void)addData:(NSData *)data forKey:(NSString *)key contentType:(NSString *)contentTypeOrNil fileName:(NSString *)fileNameOrNil</Declaration>
			<Parameters>
				<Parameter>
					<Name>data</Name>
					<Abstract type="html">The data.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">The key.</Abstract>
				</Parameter><Parameter>
					<Name>contentTypeOrNil</Name>
					<Abstract type="html">The content type, or nil to default to application/octet-stream.</Abstract>
				</Parameter><Parameter>
					<Name>fileNameOrNil</Name>
					<Abstract type="html">A suggested file name for the recipient, ignored by most servers (safe to pass nil).</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addData:forKey:contentType:fileName:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JXHTTPMultipartBody/setData:forKey:contentType:fileName:</TokenIdentifier>
			<Abstract type="html">Adds a new data part with the specified content type and overwrites any existing value.</Abstract>
			<DeclaredIn>JXHTTPMultipartBody.h</DeclaredIn>			
			
			<Declaration>- (void)setData:(NSData *)data forKey:(NSString *)key contentType:(NSString *)contentTypeOrNil fileName:(NSString *)fileNameOrNil</Declaration>
			<Parameters>
				<Parameter>
					<Name>data</Name>
					<Abstract type="html">The data.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">The key.</Abstract>
				</Parameter><Parameter>
					<Name>contentTypeOrNil</Name>
					<Abstract type="html">The content type, or nil to default to application/octet-stream.</Abstract>
				</Parameter><Parameter>
					<Name>fileNameOrNil</Name>
					<Abstract type="html">A suggested file name for the recipient, ignored by most servers (safe to pass nil).</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setData:forKey:contentType:fileName:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JXHTTPMultipartBody/addFile:forKey:contentType:fileName:</TokenIdentifier>
			<Abstract type="html">Adds a new file part with the specified content type. The file will not be accessed until
the connection begins but it must exist at the time it&apos;s added.</Abstract>
			<DeclaredIn>JXHTTPMultipartBody.h</DeclaredIn>			
			
			<Declaration>- (void)addFile:(NSString *)filePath forKey:(NSString *)key contentType:(NSString *)contentTypeOrNil fileName:(NSString *)fileNameOrNil</Declaration>
			<Parameters>
				<Parameter>
					<Name>filePath</Name>
					<Abstract type="html">The local path of the file.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">The key.</Abstract>
				</Parameter><Parameter>
					<Name>contentTypeOrNil</Name>
					<Abstract type="html">The content type, or nil to default to application/octet-stream.</Abstract>
				</Parameter><Parameter>
					<Name>fileNameOrNil</Name>
					<Abstract type="html">A suggested file name for the recipient, ignored by most servers (safe to pass nil).</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addFile:forKey:contentType:fileName:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JXHTTPMultipartBody/setFile:forKey:contentType:fileName:</TokenIdentifier>
			<Abstract type="html">Adds a new file part with the specified content type. The file will not be accessed until
the connection begins but it must exist at the time it&apos;s added. Overwrites any existing value.</Abstract>
			<DeclaredIn>JXHTTPMultipartBody.h</DeclaredIn>			
			
			<Declaration>- (void)setFile:(NSString *)filePath forKey:(NSString *)key contentType:(NSString *)contentTypeOrNil fileName:(NSString *)fileNameOrNil</Declaration>
			<Parameters>
				<Parameter>
					<Name>filePath</Name>
					<Abstract type="html">The local path of the file.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">The key.</Abstract>
				</Parameter><Parameter>
					<Name>contentTypeOrNil</Name>
					<Abstract type="html">The content type, or nil to default to application/octet-stream.</Abstract>
				</Parameter><Parameter>
					<Name>fileNameOrNil</Name>
					<Abstract type="html">A suggested file name for the recipient, ignored by most servers (safe to pass nil).</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setFile:forKey:contentType:fileName:</Anchor>
		</Token>
		
	</File>
</Tokens>